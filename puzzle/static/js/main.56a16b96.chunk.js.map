{"version":3,"sources":["Box/Box.js","Puzzle/Puzzle.js","App.js","serviceWorker.js","index.js"],"names":["Box","_this","this","react_default","a","createElement","className","onClick","props","position","boxId","Component","Puzzle","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","range","start","stop","step","Array","from","length","_","i","componentDidMount","reset","boxIds","fill","map","e","shuffle","emptyBoxPosition","v","slice","reduce","emId","embx","includes","indexOf","readyToGetEmpty","getReadyToGetEmpty","setState","isPuzzleSolved","f","concat","toConsumableArray","randomize","max","Math","floor","random","j","_ref","handleClick","newPosition","_this$state","state","boxIdToMove","_boxIds","l","requiredBoxIds","final","index","emptyBoxIndex","_this2","boxes","Box_Box_Box","key","App","Puzzle_Puzzle_Puzzle","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGqBA,gMACV,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QAAS,kBAAMN,EAAKO,MAAMD,QAAQN,EAAKO,MAAMC,YAC/DP,KAAKM,MAAME,cAJaC,cCCZC,cACnB,SAAAA,EAAYJ,GAAO,IAAAP,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAX,KAAAU,IACjBX,EAAAY,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAf,KAAMM,KAORU,MAAQ,SAACC,EAAOC,EAAMC,GAAd,OAAuBC,MAAMC,KAAK,CAAEC,QAASJ,EAAOD,GAASE,GAAQ,SAACI,EAAGC,GAAJ,MAAU,CAACP,EAASO,EAAIL,EAAQF,EAASO,EAAIL,EAASA,MARhHpB,EAUnB0B,kBAAoB,WAClB1B,EAAK2B,SAXY3B,EAcnB2B,MAAQ,WACN,IAEIC,EAASP,MAFD,IAEYQ,OAAOC,IAAI,SAACC,EAAGN,GAAJ,OAAUA,EAAI,IACjDG,EAAS5B,EAAKgC,QAAQJ,GAEtB,IAAMK,GADNL,EAAS5B,EAAKiB,MAAM,EAJR,GACG,GAGqBa,IAAI,SAACI,EAAGT,GAAJ,OAAUG,EAAOO,MAAMD,EAAE,GAAIA,EAAE,OACvCE,OAAO,SAACC,EAAMC,EAAMb,GAAb,OAAoBa,EAAKC,SALpD,IAKqE,CAACd,EAAGa,EAAKE,QAL9E,KAK8FH,GAAM,CAAC,EAAG,IACpHT,EAAOK,EAAiB,IAAIA,EAAiB,IAAM,GAEnD,IAAMQ,EAAkBzC,EAAK0C,mBAAmBT,GAChDjC,EAAK2C,SAAS,CACZf,SACAK,mBACAQ,kBACAG,gBAAgB,KA5BD5C,EAgCnB0C,mBAAqB,SAACT,GACpB,MAAO,CAAC,GAAI,GAAGH,IAAI,SAACC,GAAD,MACjB,CAAC,CAACE,EAAiB,GAAKF,EAAGE,EAAiB,IAAK,CAACA,EAAiB,GAAIA,EAAiB,GAAKF,MAC7FK,OAAO,SAACS,EAAGX,GAAJ,SAAAY,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAciC,GAAdjC,OAAAmC,EAAA,EAAAnC,CAAoBsB,KAAI,KAnChBlC,EAsCnBgD,UAAY,SAACC,GACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAvCjBjD,EA0CnBgC,QAAU,SAAC7B,GACT,IAAK,IAAIsB,EAAItB,EAAEoB,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACrC,IAAM4B,EAAIrD,EAAKgD,UAAUvB,EAAI,GADQ6B,EAEtB,CAACnD,EAAEkD,GAAIlD,EAAEsB,IAAvBtB,EAAEsB,GAFkC6B,EAAA,GAE9BnD,EAAEkD,GAF4BC,EAAA,GAIvC,OAAOnD,GA/CUH,EAkDnBuD,YAAc,SAACC,GAAgB,IAAAC,EACuBzD,EAAK0D,MAAnD9B,EADuB6B,EACvB7B,OAAQK,EADewB,EACfxB,iBAId,GAL6BwB,EACGhB,gBAEOL,OAAO,SAACS,EAAGX,GAAJ,OAAWA,EAAE,KAAOsB,EAAY,IAAMtB,EAAE,KAAOsB,EAAY,IAAaX,IAAG,GAErG,CAClB,IAAMc,EAAc/B,EAAO4B,EAAY,IAAIA,EAAY,IACvD5B,EAAO4B,EAAY,IAAIA,EAAY,IAAM,GACzC5B,EAAOK,EAAiB,IAAIA,EAAiB,IAAM0B,EACnD1B,EAAgBrB,OAAAmC,EAAA,EAAAnC,CAAO4C,GACvB,IAAMf,EAAkBzC,EAAK0C,mBAAmBT,GAChDjC,EAAK2C,SAAS,CACZf,SACAK,mBACAQ,mBACC,WACD,IAAMG,EAAiB5C,EAAK4C,eAAe5C,EAAK0D,MAAM9B,QACtD5B,EAAK2C,SAAS,CACZC,uBApEW5C,EA0EnB4C,eAAiB,SAAChB,GAChB,IAAIgC,EAAUhC,EAAOQ,OAAO,SAACS,EAAGgB,GAAJ,SAAAf,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAciC,GAAdjC,OAAAmC,EAAA,EAAAnC,CAAoBiD,KAAI,IAAI1B,MAAM,EAAG,IAC7D2B,EAAiBzC,MAAM,IAAIQ,OAAOC,IAAI,SAACC,EAAGN,GAAJ,OAAUA,EAAI,IACxD,OAAOmC,EAAQxB,OAAO,SAAC2B,EAAOtD,EAAOuD,GAAf,QAAyBD,GAASD,EAAeE,KAAWvD,IAA+B,IA3EjHT,EAAK0D,MAAQ,CACX9B,OAAQ,GACRqC,cAAe,GAJAjE,wEAgFV,IAAAkE,EAAAjE,KACDkE,EAAQlE,KAAKyD,MAAM9B,OAAOE,IAAI,SAACI,EAAGT,GAAJ,OAAUS,EAAEJ,IAAI,SAAC3B,EAAGkD,GAAJ,OAAUnD,EAAAC,EAAAC,cAACgE,EAAD,CAAKC,IAAKhB,EAAQ,EAAJ5B,EAAOnB,QAAS4D,EAAKX,YAAa9C,MAAON,EAAGK,SAAU,CAACiB,EAAG4B,SAASjB,OAAO,SAACS,EAAG1C,GAAJ,SAAA2C,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAciC,GAAdjC,OAAAmC,EAAA,EAAAnC,CAAoBT,KAAI,IAC9K,OACED,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEVJ,KAAKyD,MAAMd,eAAkB1C,EAAAC,EAAAC,cAAA,mCAAkC+D,GAGpEjE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACdH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAK0B,OAAtB,UAGFzB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UAAhB,sDA9F4BK,aCUrB4D,mLARX,OACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACmE,EAAD,cAJY7D,aCQE8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56a16b96.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Box.css';\n\nexport default class Box extends Component {\n  render() {\n    return (\n      <div className=\"box\" onClick={() => this.props.onClick(this.props.position) }>\n        {this.props.boxId}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './Puzzle.css';\nimport Box from '../Box/Box';\n\nexport default class Puzzle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boxIds: [],\n      emptyBoxIndex: 0\n    }\n  }\n\n  range = (start, stop, step) => Array.from({ length: (stop - start) / step }, (_, i) => [start + (i * step), (start + (i * step)) + step])\n\n  componentDidMount = () => {\n    this.reset()\n  }\n\n  reset = () => {\n    const max = 16;\n    const offset = 4;\n    let boxIds = Array(max).fill().map((e, i) => i + 1);\n    boxIds = this.shuffle(boxIds)\n    boxIds = this.range(0, max, offset).map((v, i) => boxIds.slice(v[0], v[1]))\n    const emptyBoxPosition = boxIds.reduce((emId, embx, i) => (embx.includes(max)) ? [i, embx.indexOf(max)] : emId, [0, 0])\n    boxIds[emptyBoxPosition[0]][emptyBoxPosition[1]] = '';\n\n    const readyToGetEmpty = this.getReadyToGetEmpty(emptyBoxPosition)\n    this.setState({\n      boxIds,\n      emptyBoxPosition,\n      readyToGetEmpty,\n      isPuzzleSolved: false\n    })\n  }\n\n  getReadyToGetEmpty = (emptyBoxPosition) => {\n    return [1, -1].map((e) =>\n      [[emptyBoxPosition[0] + e, emptyBoxPosition[1]], [emptyBoxPosition[0], emptyBoxPosition[1] + e]]\n    ).reduce((f, v) => [...f, ...v], [])\n  }\n\n  randomize = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = this.randomize(i + 1);\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  handleClick = (newPosition) => {\n    let { boxIds, emptyBoxPosition, readyToGetEmpty } = this.state;\n\n    const isMovePossible = readyToGetEmpty.reduce((f, v) => (v[0] === newPosition[0] && v[1] === newPosition[1]) ? true : f, false)\n\n    if (isMovePossible) {\n      const boxIdToMove = boxIds[newPosition[0]][newPosition[1]]\n      boxIds[newPosition[0]][newPosition[1]] = \"\"\n      boxIds[emptyBoxPosition[0]][emptyBoxPosition[1]] = boxIdToMove\n      emptyBoxPosition = [...newPosition]\n      const readyToGetEmpty = this.getReadyToGetEmpty(emptyBoxPosition)\n      this.setState({\n        boxIds,\n        emptyBoxPosition,\n        readyToGetEmpty\n      }, () => {\n        const isPuzzleSolved = this.isPuzzleSolved(this.state.boxIds)\n        this.setState({\n          isPuzzleSolved\n        })\n      })\n    }\n  }\n\n  isPuzzleSolved = (boxIds) => {\n    let _boxIds = boxIds.reduce((f, l) => [...f, ...l], []).slice(0, 15)\n    let requiredBoxIds = Array(15).fill().map((e, i) => i + 1);\n    return _boxIds.reduce((final, boxId, index) => final ? (requiredBoxIds[index] === boxId ? true : false) : false, true)\n  }\n\n  render() {\n    const boxes = this.state.boxIds.map((v, i) => v.map((a, j) => <Box key={j + i * 4} onClick={this.handleClick} boxId={a} position={[i, j]} />)).reduce((f, a) => [...f, ...a], [])\n    return (\n      <div className=\"container\">\n        <div className=\"puzzle\">\n          {\n            (this.state.isPuzzleSolved) ? <div>Awesome.. You did it</div> : boxes\n          }\n        </div>\n        <div className={'btn-container'}>\n          <button onClick={this.reset}>Reset</button>\n        </div>\n\n        <div className={'footer'}>\n          Developed by DNA | Powered NS Tech Academy\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Puzzle from './Puzzle/Puzzle';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Puzzle />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}